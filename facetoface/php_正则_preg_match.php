<?php

/**
 * 一.正则语法
 * url1:http://www.cnblogs.com/hellohell/p/5718319.html
 * url2:http://www.cnblogs.com/-run/articles/2371078.html
 * url3:http://blog.csdn.net/eightwhells/article/details/8935390
 */

1.定界符
(1)“/”是定界符，“/”定界符之间的部分就是将要在目标对象中进行匹配的模式
(2)除了字母、数字和反斜线\以外的任何字符都可以为定界符号，比如 ||、//、{}、!!等等，但是需要注意，如果没有特殊需要，我们都使用正斜线//作为正则表达式的定界符号。 

2.定位符
(1)“^”定位符规定匹配模式必须出现在目标字符串的开头,"^de"，表示以de开头的字符串
(2)“$”定位符规定匹配模式必须出现在目标对象的结尾,"de$",表示以de结尾的字符串
(3)\b 定位符规定匹配模式必须出现在目标字符串的开头或结尾的两个边界之一,匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。
(4)“\B”定位符则规定匹配对象必须位于目标字符串的开头和结尾两个边界之内,匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。

3.选择字符
(1)选择字符(|) ，表示或如Aa|aA，表示Aa或者是aA的意思。
(2)”[]”,在使用”[]”的时候，往往配合连接字符”-“一起使用，如[a-d],代表a或b或c或d。

4.括号字符()
(1)改变限定符如（|、* 、^)的作用范围 如(my|your)baby，如果没有”()”，|将匹配的是要么是my，要么是yourbaby,有了小括号，匹配的就是mybaby或yourbaby。
(2)进行分组，便于反向引用

5.点号操作符'.',例"/.*/"匹配任何字符

6.排除字符，排除操作
正则表达式提供了”^”来表示排除不符合的字符，^一般放在[]中。如[^1-5]，该字符不是1~5之间的数字。

7.转义字符(\)
转义字符主要是将一些特殊字符转为普通字符。而这些常用特殊字符有”.”，”?”、”\”等。

8.限定符
	？	零次或一次
	*	零次或多次
	+	一次或多次
	{n}	n次
	{n,}	至少n次
	{n,m}	n到m次

9.转义字符
	\d	任意一个十进制数字[0-9]
	\D	任意一个非十进制数字
	\s	任意一个空白字符(空格、换行符、换页符、回车符、字表符)
	\S	任意一个非空白字符
	\w	任意一个单词字符
	\W	任意个非单词字符

10.显示不可打印的字符
	\a	报警
	\b	退格
	\f	换页
	\n	换行
	\r	回车
	\t	字表符

11.反向引用
(1)反向引用，就是依靠子表达式的”记忆”功能，匹配连续出现的字串或是字符。如(dqs)(pps)\1\2，表示匹配字符串dqsppsdqspps
(2)在使用反向匹配的时候都需要使用(),反向匹配时，匹配()里面出现的字符或字符串。
(3)\n表示第n次匹配到的结果,"()"内的内容

12.模式修饰符
模式修饰符的作用是设定模式，也就是正则表达式如何解释。php中主要模式如下表：
	i	忽略大小写
	m	多文本模式
	s	单行文本模式
	x	忽略空白字符
	A	表示如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说"/a/A"匹配"abcd"
	E 	与"m"相反，表示如果使用这个修饰符，那么"$"将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。
	U 	表示和问号的作用差不多，用于设置"贪婪模式"
例,'/a\w*c/i'就是匹配一个由”a+0个或多个字母+c”不区分大小写的字符串

13.各种操作符的运算优先级
	相同优先级的从左到右进行运算，不同优先级的运算先高后低。各种操作符的优先级从高到低如下：
	操作符						描述
	\							转义符
	(), (?:), (?=), []			圆括号和方括号
	*, +, ?, {n}, {n,}, {n,m}	限定符
	^, $, \anymetacharacter		位置和顺序
	|	
							“或”操作
14.php中贪婪匹配与惰性匹配
(1)贪婪匹配：就是匹配尽可能多的字符。 
	比如，正则表达式中m.*n，它将匹配最长以m开始，n结尾的字符串。如果用它来搜索manmpndegenc的话，它将匹配到的字符串是manmpndegen而非man。可以这样想，当匹配到m的时候，它将从后面往前匹配字符n。
(2)懒惰匹配：就是匹配尽可能少的字符。 
	有的时候，我们需要并不是去贪婪匹配，而是尽可能少的去匹配。这时候，就需要将其转为惰性匹配。怎样将一个贪婪匹配转为惰性匹配呢？只需要在其后面添加一个”？”即可。如m.*?n将匹配manmpndegenc，匹配到的字符串是man。
	函数符	描述
	*?		零次或多次，但尽可能少的匹配
	+?		一次或多次，但尽可能少的匹配
	??		0次或1次，但尽可能少的匹配
	{n,}?	至少n次，但尽可能少的匹配
	{n,m}?	n到m次 ，但尽可能少的匹配

/**
 * 二.js正则函数
 */
/****match*****/
var reg=/^[A-Z]{2}\d{12}$/
var isMatch = str.match(reg);//失败返回NULL,成功返回数组
/***test******/
var reg =new RegExp("a");//最简单的正则表达式,将匹配字母a 
var reg=new RegExp("a","i");//第二个参数,g （全文查找）,i （忽略大小写） ,m （多行查找)
例如，下面的两条语句是等价的：  
var reg=new RegExp("\\w+");  
var reg=/\w+;
var isMatch = reg.test(str);//返回 Boolean，查找对应的字符串中是否存在模式。

/**
 *三.php正则函数
 */
1.正则匹配
(1)preg_match() 和 preg_match_all() 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0 。
(2)int preg_match( string pattern, string subject [, array matches ] )
	pattern	正则表达式
	subject	需要匹配检索的对象
	matches	可选，存储匹配结果的数组， $matches[0] 将包含与整个模式匹配的文本，$matches[1] 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推

2.正则替换
(1)preg_replace_callback() 和 preg_replace() 函数进行正则表达式替换,如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。
(2)mixed preg_replace ( mixed pattern,mixedreplacement , mixed subject[,intlimit = -1 [, int &count]])
	描述：在字符串subject中，查找pattern,然后使用replacement 去替换，如果有limit则代表限制替换limit次。

3.正则切割
(1)php提供了split、preg_split 函数。preg_split() 函数，通常是比 split() 更快的替
(2)array preg_split ( string pattern,string subject [, int limit=−1[,intflags = 0 ]] )

/**
 * 四.正则示例
 */
1.匹配ip
/** 
匹配ip 
	规则： 
	    **1.**2.**3.**4 
	    **1可以是一位的 1-9，两位的01-99，三位的001-255 
	    **2和**3可以是一位的0-9，两位的00-99,三位的000-255 
	    **4可以是一位的 1-9，两位的01-99，三位的001-255 
	    四个参数必须存在 
*/  
$pattern = '/^((([1-9])|((0[1-9])|([1-9][0-9]))|((00[1-9])|(0[1-9][0-9])|((1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))))\.)((([0-9]{1,2})|(([0-1][0-9]{2})|(2[0-4][0-9])|(25[0-5])))\.){2}(([1-9])|((0[1-9])|([1-9][0-9]))|(00[1-9])|(0[1-9][0-9])|((1[0-9]{2})|(2[0-4][0-9])|(25[0-5])))$/';  

2.手机号
/** 
    匹配手机号码 
    规则： 
        手机号码基本格式： 
        前面三位为： 
        移动：134-139 147 150-152 157-159 182 187 188 
        联通：130-132 155-156 185 186 
        电信：133 153 180 189 
        后面八位为： 
        0-9位的数字 
*/  
  
$pattern  = "/^((13[0-9])|147|(15[0-35-9])|180|182|(18[5-9]))[0-9]{8}$/A"; 

3.电话号码
/** 
    电话号码匹配 
    电话号码规则： 
        区号：3到5位，大部分都是四位，北京(010)和上海市(021)三位，西藏有部分五位，可以包裹在括号内也可以没有 
        如果有区号由括号包裹，则在区号和号码之间可以有0到1个空格，如果区号没有由括号包裹，则区号和号码之间可以有两位长度的 或者- 
        号码：7到8位的数字 
        例如：(010) 12345678  或者 (010)12345678 或者 010  12345678 或者 010--12345678  
*/  
$pattern='/^((\()(010|021|0\d{3,4})(\))( ?)([0-9]{7,8}))|((010|021|0\d{3,4})([- ]{1,2})([0-9]{7,8}))$/A';

4.url匹配 
/** 
    匹配url 
    url规则： 
        例 
        协议://域名（www/tieba/baike...）.名称.后缀/文件路径/文件名 
        http://zhidao.baidu.com/question/535596723.html 
        协议://域名（www/tieba/baike...）.名称.后缀/文件路径/文件名?参数 
        www.lhrb.com.cn/portal.php?mod=view&aid=7412 
        协议://域名（www/tieba/baike...）.名称.后缀/文件路径/文件名/参数 
        http://www.xugou.com.cn/yiji/erji/index.php/canshu/11 
         
        协议：可有可无，由大小写字母组成；不写协议则不应存在://，否则必须存在:// 
        域名：必须存在，由大小写字母组成 
        名称：必须存在，字母数字汉字 
        后缀：必须存在，大小写字母和.组成 
        文件路径：可有可无，由大小写字母和数字组成 
        文件名：可有可无，由大小写字母和数字组成 
        参数:可有可无，存在则必须由?开头，即存在?开头就必须有相应的参数信息 
*/  
$pattern = '/^(([a-zA-Z]+)(:\/\/))?([a-zA-Z]+\.)?(\w+)(\.\w+)*(\/?([\w]+)\/?)*(\/?\w*\.(\w+))*(\/?([\w]+)\/?)*(\?(\w+=?[\w]*))*((&?\w+=?[\w]*))*$/';  

5.邮箱验证 
/** 
	匹配邮箱 
	规则： 
	    邮箱基本格式是  *****@**.** 
	    @以前是一个 大小写的字母或者数字开头，紧跟0到多个大小写字母或者数字或 . _ - 的字符串 
	    @之后到.之前是 1到多个大小写字母或者数字的字符串 
	    .之后是 1到多个 大小写字母或者数字或者.的字符串 
*/  
$pattern = '/^[a-zA-Z0-9][a-zA-Z0-9\._-]*\@[a-zA-Z0-9]+\.[a-zA-Z0-9\.]+$/A'; //细
$pattern = '/^\w+@\w+(\.)\w+$/';	//粗

6.身份证匹配
/** 
	匹配身份证号 
	规则： 
	    15位纯数字或者18位纯数字或者17位数字加一位x 
*/  
$pattern = '/^(([0-9]{15})|([0-9]{18})|([0-9]{17}x))$/';

7.匹配邮编
/** 
    匹配邮编 
        规则：六位数字，第一位不能为0 
*/  
$pattern ='/^[1-9]\d{5}$/';  

8.匹配时间
/** 
	匹配时间 
	    规则： 
	        形式可以为： 
	        年-月-日 小时:分钟:秒 
	        年-月-日 小时:分钟 
	        年-月-日 小时 
	        年-月-日 
	        年：1或2开头的四位数 
	        月：1位1到9的数；0或1开头的两位数，0开头的时候个位数是1到9的数，1开头的时候个位数是1到2的数 
	        日：1位1到9的数；0或1或2或3开头的两位数，0开头的时候个位数是1到9的数，1或2开头的时候个位数是0到9的数，3开头的时候个位数是0或1 
	        小时：0到9的一位数；0或1开头的两位数，个位是0到9；2开头的两位数，个位是0-3 
	        分钟：0到9的一位数；0到5开头的两位数，个位是0到9； 
	        秒  ：0到9的一位数；0到5开头的两位数，各位是0到9 
*/  
$pattern ='/^(([1-2][0-9]{3}-)((([1-9])|(0[1-9])|(1[0-2]))-)((([1-9])|(0[1-9])|([1-2][0-9])|(3[0-1]))))( ((([0-9])|(([0-1][0-9])|(2[0-3]))):(([0-9])|([0-5][0-9]))(:(([0-9])|([0-5][0-9])))?))?$/';  

9.匹配中文
//utf8下匹配中文  
$pattern ='/([\x{4e00}-\x{9fa5}]){1}/u';
$pattern="/^[\x80-\xff]{6,26}$/"; //2-8个中文

10.数字小数点正则
$pattern="/^[+-]?\d+(\.\d+)?$/";

11.查找字符串中的<img src="" alt="">
$pattern='/<img.+src=\"?(.+\.(jpg|gif|bmp|bnp|png))\"?.+>/i';
